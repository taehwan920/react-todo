{"version":3,"sources":["components/todopart/DeleteToDo.js","components/todopart/UpdateBtn.js","components/todopart/UpdateInput.js","components/todopart/ToDoBox.js","components/todopart/ControlToDo.js","components/todopart/WriteToDo.js","components/namepart/HelloName.js","components/namepart/YourName.js","components/namepart/NamePart.js","App.js","serviceWorker.js","index.js"],"names":["deleteToDo","e","_id","parseInt","target","parentElement","dataset","id","tempToDos","Array","from","props","toDos","getToDoIdx","findIndex","item","splice","parsedToDos","JSON","stringify","localStorage","setItem","getToDos","parse","getItem","onClick","className","role","aria-label","this","bind","React","Component","toggleInput","updateToDo","_content","value","toDo","onSubmit","action","method","autoComplete","data-id","toDoItem","preventDefault","name","type","placeholder","key","changeToDo","getInput","document","querySelectorAll","inputIdx","classList","toggle","arrToDos","toDoList","map","push","console","log","wroteValue","writeToDo","newToDo","length","HelloName","userName","getUserName","App","state","componentDidMount","getName","parsedName","setState","strName","newToDos","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1be18852.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class extends React.Component {\r\n    deleteToDo = (e) => {\r\n        const _id = parseInt(e.target.parentElement.parentElement.parentElement.dataset.id);\r\n        const tempToDos = Array.from(this.props.toDos);\r\n        const getToDoIdx = tempToDos.findIndex(item => item.id === _id);\r\n\r\n        tempToDos.splice(getToDoIdx, 1);\r\n        const parsedToDos = JSON.stringify(tempToDos);\r\n        localStorage.setItem('TODOS', parsedToDos)\r\n\r\n        const getToDos = JSON.parse(localStorage.getItem('TODOS'));\r\n        this.props.onClick(getToDos);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <span\r\n                className=\"del-btn\"\r\n                role=\"img\"\r\n                aria-label=\"cross mark\"\r\n                onClick={\r\n                    function (e) {\r\n                        this.deleteToDo(e);\r\n                    }.bind(this)}\r\n            >❌</span>\r\n        )\r\n    }\r\n};","import React from 'react';\r\n\r\nexport default class extends React.Component {\r\n    render() {\r\n        return (\r\n            <span\r\n                className=\"btn update-btn\"\r\n                role=\"img\"\r\n                aria-label=\"writing hand\"\r\n                onClick={\r\n                    function (e) {\r\n                        const _id = parseInt(e.target.parentElement.parentElement.parentElement.dataset.id)\r\n                        this.props.toggleInput(_id);\r\n                    }.bind(this)}\r\n            >✍</span>\r\n        )\r\n    }\r\n};","import React from 'react';\r\n\r\nexport default class extends React.Component {\r\n    updateToDo = (e) => {\r\n        const _id = parseInt(e.target.parentElement.dataset.id);\r\n        const _content = e.target.updateToDo.value;\r\n        const tempToDos = Array.from(this.props.toDos);\r\n        const getToDoIdx = tempToDos.findIndex(item => item.id === _id);\r\n\r\n        this.props.toggleInput(_id);\r\n        tempToDos[getToDoIdx].toDo = _content;\r\n        const parsedToDos = JSON.stringify(tempToDos);\r\n        localStorage.setItem('TODOS', parsedToDos)\r\n\r\n        const getToDos = JSON.parse(localStorage.getItem('TODOS'));\r\n        this.props.onSubmit(getToDos);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form\r\n                action=\"/\"\r\n                method=\"post\"\r\n                autoComplete=\"none\"\r\n                className=\"updateBox\"\r\n                data-id={this.props.toDoItem.id}\r\n                onSubmit={\r\n                    function (e) {\r\n                        e.preventDefault();\r\n                        this.updateToDo(e);\r\n                    }.bind(this)}>\r\n                <input\r\n                    name=\"updateToDo\"\r\n                    className=\"updateInput\"\r\n                    type=\"text\"\r\n                    placeholder=\"wanna change?\"></input>\r\n                <button\r\n                    className=\"updateBtn\"\r\n                    type=\"submit\"\r\n                >✔</button>\r\n            </form>\r\n        )\r\n    }\r\n};\r\n\r\n","import React from 'react';\r\nimport DeleteToDo from './DeleteToDo';\r\nimport UpdateBtn from './UpdateBtn';\r\nimport UpdateInput from './UpdateInput';\r\n\r\n\r\nexport default class extends React.Component {\r\n    render() {\r\n        const item = this.props.item\r\n        return (\r\n            <div\r\n                className=\"toDoBox\"\r\n                key={item.id}\r\n                data-id={item.id}>\r\n                <li className=\"toDo\" >\r\n                    {item.toDo}\r\n                    <div className=\"btnBox\">\r\n                        <UpdateBtn toggleInput={this.props.toggleInput}></UpdateBtn>\r\n                        <DeleteToDo\r\n                            toDos={this.props.toDos}\r\n                            onClick={this.props.changeToDo}></DeleteToDo>\r\n                    </div>\r\n                </li>\r\n                <UpdateInput\r\n                    toDos={this.props.toDos}\r\n                    toDoItem={item}\r\n                    onSubmit={this.props.changeToDo}\r\n                    toggleInput={this.props.toggleInput}\r\n                ></UpdateInput>\r\n            </div >\r\n        )\r\n    }\r\n};","import React from 'react';\r\nimport ToDoBox from './ToDoBox';\r\n\r\nexport default class extends React.Component {\r\n\r\n    toggleInput = (_id) => {\r\n        const getInput = Array.from(document.querySelectorAll('.updateBox'))\r\n        const inputIdx = getInput.findIndex(item => parseInt(item.dataset.id) === _id);\r\n        getInput[inputIdx].classList.toggle('actBox');\r\n    };\r\n\r\n    render() {\r\n        const arrToDos = this.props.toDos;\r\n        const toDoList = [];\r\n        arrToDos\r\n            ? arrToDos.map(item =>\r\n                toDoList.push(\r\n                    <ToDoBox\r\n                        changeToDo={this.props.changeToDo}\r\n                        toDos={this.props.toDos}\r\n                        toggleInput={this.toggleInput}\r\n                        item={item}\r\n                    ></ToDoBox>\r\n                )\r\n            )\r\n            : console.log('toDoList is empty!');\r\n\r\n        return (\r\n            <article className=\"toDoList\" >\r\n                <div className=\"toDoBoxContainer\">\r\n                    {toDoList}\r\n                </div>\r\n            </article>\r\n        )\r\n    }\r\n};","import React from 'react';\r\n\r\nexport default class extends React.Component {\r\n    onSubmit(e) {\r\n        const wroteValue = e.target.writeToDo.value;\r\n        if (wroteValue) {\r\n            const toDos = this.props.toDos;\r\n            const newToDo = {\r\n                id: toDos.length + 1,\r\n                toDo: wroteValue\r\n            }\r\n            const tempToDos = Array.from(toDos);\r\n            tempToDos.push(newToDo);\r\n            const parsedToDos = JSON.stringify(tempToDos);\r\n            localStorage.setItem('TODOS', parsedToDos);\r\n\r\n            e.target.writeToDo.value = '';\r\n\r\n            const getToDos = JSON.parse(localStorage.getItem('TODOS'));\r\n            this.props.onSubmit(getToDos);\r\n        } else {\r\n            console.log('write something')\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <center className=\"centerForWriting\">\r\n                <form\r\n                    action=\"/\"\r\n                    method=\"post\"\r\n                    autoComplete=\"none\"\r\n                    className=\"writeToDo\"\r\n                    onSubmit={\r\n                        function (e) {\r\n                            e.preventDefault();\r\n                            this.onSubmit(e);\r\n                        }.bind(this)}>\r\n                    <input\r\n                        className=\"writeInput\"\r\n                        name=\"writeToDo\"\r\n                        type=\"text\"\r\n                        autoComplete=\"off\"\r\n                        placeholder=\"to do?\"\r\n                    />\r\n                    <button\r\n                        className=\"submitBtn\"\r\n                        type=\"submit\"\r\n                    >✔</button>\r\n                </form>\r\n            </center>\r\n        )\r\n    }\r\n};","import React from 'react';\r\n\r\nclass HelloName extends React.Component {\r\n    shouldComponentUpdate() {\r\n        return (\r\n            this.props.name\r\n                ? false\r\n                : true\r\n        )\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"helloName\">\r\n                hello, {this.props.name}!\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default HelloName;","import React from \"react\";\r\n\r\nexport default class extends React.Component {\r\n    shouldComponentUpdate() {\r\n        return (\r\n            this.props.name\r\n                ? true\r\n                : false\r\n        )\r\n    }\r\n\r\n    onSubmit(e) {\r\n        const userName = JSON.stringify(e.target.name.value);\r\n        localStorage.setItem('NAME', userName);\r\n\r\n        const getUserName = JSON.parse(localStorage.getItem('NAME'));\r\n        this.props.onSubmit(getUserName);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form\r\n                action=\"/\"\r\n                method=\"post\"\r\n                autoComplete=\"none\"\r\n                className=\"yourName\"\r\n                onSubmit={\r\n                    function (e) {\r\n                        e.preventDefault();\r\n                        this.onSubmit(e);\r\n                    }.bind(this)}>\r\n                <input\r\n                    name=\"name\"\r\n                    type=\"text\"\r\n                    autoComplete=\"off\"\r\n                    placeholder=\"name?\"\r\n                    className=\"nameInput\"\r\n                />\r\n                <button\r\n                    className=\"submitBtn\"\r\n                    type=\"submit\">✔</button>\r\n            </form>\r\n        )\r\n    }\r\n};","import React from 'react';\r\nimport HelloName from './HelloName';\r\nimport YourName from './YourName';\r\n\r\nexport default class extends React.Component {\r\n    render() {\r\n        return (\r\n            <header className=\"headerForName\">\r\n                {this.props.userName\r\n                    ? <HelloName name={this.props.userName}></HelloName>\r\n                    : <YourName\r\n                        onSubmit={this.props.onSubmit}>\r\n                    </YourName >}\r\n            </header>\r\n        )\r\n    }\r\n};","import React from 'react';\nimport ControlTodo from './components/todopart/ControlToDo';\nimport WriteToDo from './components/todopart/WriteToDo';\nimport NamePart from './components/namepart/NamePart';\n\n\nclass App extends React.Component {\n    state = {\n        userName: null,\n        toDos: []\n    }\n\n    componentDidMount = () => {\n        const getName = localStorage.getItem('NAME');\n        const parsedName = JSON.parse(getName);\n\n        getName\n            ? this.setState({ userName: parsedName })\n            : console.log('이름이 없음!')\n\n        const getToDos = localStorage.getItem('TODOS');\n        const parsedToDos = JSON.parse(getToDos);\n\n        getToDos\n            ? this.setState({ toDos: parsedToDos })\n            : console.log('텅 비었음!')\n    }\n\n    render() {\n        const toDos = this.state.toDos;\n        return (\n            <main className=\"App\">\n                <NamePart\n                    userName={this.state.userName}\n                    onSubmit={\n                        function (strName) {\n                            this.setState({ userName: strName })\n                        }.bind(this)\n                    }\n                ></NamePart>\n                <WriteToDo\n                    toDos={toDos}\n                    onSubmit={\n                        function (newToDo) {\n                            this.setState({ toDos: newToDo })\n                        }.bind(this)}></WriteToDo>\n                <ControlTodo\n                    toDos={toDos}\n                    changeToDo={\n                        function (newToDos) {\n                            this.setState({ toDos: newToDos });\n                        }.bind(this)}\n                ></ControlTodo>\n            </main>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles/styles.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}